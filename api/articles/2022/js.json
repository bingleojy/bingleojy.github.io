{"title":"JavaScript: 是一种具有函数优先的轻量级，解释型或即时编译型的编程语言","slug":"2022/js","date":"2022-07-31T11:10:27.000Z","updated":"2022-08-26T12:45:40.417Z","comments":true,"path":"api/articles/2022/js.json","excerpt":null,"covers":null,"content":"<p><em>JavaScript 是一种全栈式的编程语言</em></p>\n<h3 id=\"基础语法\">基础语法</h3>\n<p>JavaScript 是区分大小写的，并使用 Unicode 字符集，JavaScript 是大小写敏感。<br>\nECMAScript 规定了在语句的末尾自动插入分号</p>\n<pre><code>var aStr &#x3D; &quot;foobar&quot;;</code></pre>\n<h3 id=\"注释\">注释</h3>\n<pre><code>&#x2F;&#x2F; 单行注释\n\n&#x2F;* 这是一个更长的，\n   多行注释\n*&#x2F;\n\n&#x2F;* 然而，你不能，&#x2F;* 嵌套注释 *&#x2F; 语法错误 *&#x2F;</code></pre>\n<h3 id=\"声明\">声明</h3>\n<p>JavaScript 有三种声明方式。</p>\n<pre><code>\n&#x2F;&#x2F; 声明一个变量，可选初始化一个值。\nvar  aStr;\n\n\n\n&#x2F;&#x2F; 声明一个块作用域的局部变量，可选初始化一个值。\nlet aStr;\n\n\n\n&#x2F;&#x2F; 声明一个块作用域的只读常量。\nconst aStr &#x3D; &quot;Hello World!&quot;\n</code></pre>\n<h3 id=\"变量的作用域\">变量的作用域</h3>\n<ol>\n<li>全局变量</li>\n<li>常量 (Constants)</li>\n</ol>\n<p>在函数之外声明的变量，叫做全局变量，因为它可被当前文档中的任何其他代码所访问。在函数内部声明的变量，叫做局部变量，因为它只能在当前函数的内部访问。</p>\n<h3 id=\"变量提升\">变量提升</h3>\n<p>JavaScript 变量的另一个不同寻常的地方是，你可以先使用变量稍后再声明变量而不会引发异常。这一概念称为变量提升；</p>\n<pre><code>&#x2F;**\n * 例子 1\n *&#x2F;\nconsole.log(x &#x3D;&#x3D;&#x3D; undefined); &#x2F;&#x2F; true\nvar x &#x3D; 3;\n\n\n&#x2F;**\n * 例子 2\n *&#x2F;\n&#x2F;&#x2F; will return a value of undefined\nvar myvar &#x3D; &quot;my value&quot;;\n\n(function() {\n  console.log(myvar); &#x2F;&#x2F; undefined\n  var myvar &#x3D; &quot;local value&quot;;\n})();</code></pre>\n<h3 id=\"控制流\">控制流</h3>\n<h4 id=\"if-语句\">if 语句</h4>\n<pre><code>if ( condition ) {\n\tblock of code to be executed if the condition is true\n}</code></pre>\n<h4 id=\"if-else-语句\">if else 语句</h4>\n<pre><code>if ( condition ) {\n\tblock of code to be executed if the condition is true\n} else {\n\tblock of code to be executed if the condition is false\n}</code></pre>\n<h4 id=\"if-else-if-语句\">if else if 语句</h4>\n<pre><code>if ( condition1 ) {\n\tblock of code to be executed if the condition is true\n} else if ( condition2 ) {\n\tblock of code to be executed if the condition is true\n} else {\n\tblock of code to be executed if the condition is false\n}</code></pre>\n<h4 id=\"switch-语句\">switch 语句</h4>\n<pre><code>switch (expression) {\n\tcase label_1:\n\t\tstatements_1\n\t\t[break;]\n\tcase label_2:\n\t\tstatements_2\n\t\t[break;]\n\t...\n\tdefault:\n\t\tstatements_def\n\t\t[break;]\n}</code></pre>\n","more":"<p><em>JavaScript 是一种全栈式的编程语言</em></p>\n<h3 id=\"基础语法\">基础语法</h3>\n<p>JavaScript 是区分大小写的，并使用 Unicode 字符集，JavaScript 是大小写敏感。<br>\nECMAScript 规定了在语句的末尾自动插入分号</p>\n<pre><code>var aStr &#x3D; &quot;foobar&quot;;</code></pre>\n<h3 id=\"注释\">注释</h3>\n<pre><code>&#x2F;&#x2F; 单行注释\n\n&#x2F;* 这是一个更长的，\n   多行注释\n*&#x2F;\n\n&#x2F;* 然而，你不能，&#x2F;* 嵌套注释 *&#x2F; 语法错误 *&#x2F;</code></pre>\n<h3 id=\"声明\">声明</h3>\n<p>JavaScript 有三种声明方式。</p>\n<pre><code>\n&#x2F;&#x2F; 声明一个变量，可选初始化一个值。\nvar  aStr;\n\n\n\n&#x2F;&#x2F; 声明一个块作用域的局部变量，可选初始化一个值。\nlet aStr;\n\n\n\n&#x2F;&#x2F; 声明一个块作用域的只读常量。\nconst aStr &#x3D; &quot;Hello World!&quot;\n</code></pre>\n<h3 id=\"变量的作用域\">变量的作用域</h3>\n<ol>\n<li>全局变量</li>\n<li>常量 (Constants)</li>\n</ol>\n<p>在函数之外声明的变量，叫做全局变量，因为它可被当前文档中的任何其他代码所访问。在函数内部声明的变量，叫做局部变量，因为它只能在当前函数的内部访问。</p>\n<h3 id=\"变量提升\">变量提升</h3>\n<p>JavaScript 变量的另一个不同寻常的地方是，你可以先使用变量稍后再声明变量而不会引发异常。这一概念称为变量提升；</p>\n<pre><code>&#x2F;**\n * 例子 1\n *&#x2F;\nconsole.log(x &#x3D;&#x3D;&#x3D; undefined); &#x2F;&#x2F; true\nvar x &#x3D; 3;\n\n\n&#x2F;**\n * 例子 2\n *&#x2F;\n&#x2F;&#x2F; will return a value of undefined\nvar myvar &#x3D; &quot;my value&quot;;\n\n(function() {\n  console.log(myvar); &#x2F;&#x2F; undefined\n  var myvar &#x3D; &quot;local value&quot;;\n})();</code></pre>\n<h3 id=\"控制流\">控制流</h3>\n<h4 id=\"if-语句\">if 语句</h4>\n<pre><code>if ( condition ) {\n\tblock of code to be executed if the condition is true\n}</code></pre>\n<h4 id=\"if-else-语句\">if else 语句</h4>\n<pre><code>if ( condition ) {\n\tblock of code to be executed if the condition is true\n} else {\n\tblock of code to be executed if the condition is false\n}</code></pre>\n<h4 id=\"if-else-if-语句\">if else if 语句</h4>\n<pre><code>if ( condition1 ) {\n\tblock of code to be executed if the condition is true\n} else if ( condition2 ) {\n\tblock of code to be executed if the condition is true\n} else {\n\tblock of code to be executed if the condition is false\n}</code></pre>\n<h4 id=\"switch-语句\">switch 语句</h4>\n<pre><code>switch (expression) {\n\tcase label_1:\n\t\tstatements_1\n\t\t[break;]\n\tcase label_2:\n\t\tstatements_2\n\t\t[break;]\n\t...\n\tdefault:\n\t\tstatements_def\n\t\t[break;]\n}</code></pre>\n","categories":[{"name":"2022","path":"api/categories/2022.json"}],"tags":[{"name":"JavaScript","path":"api/tags/JavaScript.json"}]}